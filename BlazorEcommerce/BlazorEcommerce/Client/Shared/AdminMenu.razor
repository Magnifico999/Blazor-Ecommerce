@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@using System.Security.Claims

@if (authorized)
{
    <a class="dropdown-item" @onclick:preventDefault href="admin/products" @onclick="NavigateToProducts">Products</a>
    <a class="dropdown-item" @onclick:preventDefault href="admin/categories" @onclick="NavigateToCategories">Categories</a>
    <a class="dropdown-item" @onclick:preventDefault href="admin/product-types" @onclick="NavigateToProductTypes">Product Types</a>
    <hr />
}

@code {
    bool authorized = false;
    private bool showUserMenu = false;

    private string UserMenuCssClass => showUserMenu ? "show-menu" : null;


    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }


    protected override async Task OnInitializedAsync()
    {
        string role = (await AuthStateProvider.GetAuthenticationStateAsync())
        .User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role).Value;
        if (role.Contains("Admin"))
        {
            authorized = true;
        }
    }
    private async Task NavigateToCategories()
    {
        showUserMenu = false;
        await Task.Delay(100);
        NavigationManager.NavigateTo("/admin/categories");
    }
    private async Task NavigateToProductTypes()
    {
        showUserMenu = false;
        await Task.Delay(100);
        NavigationManager.NavigateTo("/admin/product-types");
    }
    private async Task NavigateToProducts()
    {
        showUserMenu = false;
        await Task.Delay(100);
        NavigationManager.NavigateTo("/admin/products");
    }
}

   

 